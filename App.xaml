<Application
    x:Class="CourseWork.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:CourseWork"
    StartupUri="/LogInWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <Style
                x:Key="RoundedButton"
                x:Name="RoundedButton"
                TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                Padding="2"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1"
                                CornerRadius="30">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        To="#FFBD9422"
                                        Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
                                        To="#e1b12c"
                                        Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="menuTab" TargetType="{x:Type TextBlock}">
                <Style.Setters>
                    <Setter Property="TextWrapping" Value="NoWrap" />
                    <Setter Property="TextTrimming" Value="None" />
                    <Setter Property="Foreground" Value="#FF888888" />
                </Style.Setters>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"
                                        To="White"
                                        Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"
                                        To="#FF888888"
                                        Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style
                x:Key="placeHolder"
                BasedOn="{StaticResource {x:Type TextBox}}"
                TargetType="{x:Type TextBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Grid>
                                <TextBox
                                    x:Name="textSource"
                                    Panel.ZIndex="2"
                                    Background="Transparent"
                                    BorderBrush="#e1b12c"
                                    BorderThickness="0,0,0,3"
                                    Foreground="#fffcf2"
                                    Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <TextBox
                                    Panel.ZIndex="1"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="0,0,0,0"
                                    Text="{TemplateBinding Tag}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Foreground" Value="Transparent" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                    <Setter Property="Foreground" Value="#718093" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="OptionMarkFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle
                                Margin="14,0,0,0"
                                SnapsToDevicePixels="true"
                                Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                StrokeDashArray="1 2"
                                StrokeThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121" />
            <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="Transparent" />
            <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF" />
            <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#e1b12c" />
            <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="Transparent" />
            <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD" />
            <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121" />
            <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="Transparent" />
            <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC" />
            <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070" />
            <ControlTemplate x:Key="adminCheckbox" TargetType="{x:Type CheckBox}">
                <Grid
                    x:Name="templateRoot"
                    Background="Transparent"
                    SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Border
                        x:Name="checkBoxBorder"
                        Margin="1"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6">

                        <Grid
                            x:Name="markGrid"
                            Width="12"
                            Height="12">
                            <Path
                                x:Name="optionMark"
                                Width="7"
                                Height="7"
                                Margin="1"
                                Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                Fill="#e1b12c"
                                Opacity="0"
                                Stretch="Uniform" />
                            <Rectangle
                                x:Name="indeterminateMark"
                                Margin="2"
                                Fill="#e1b12c"
                                Opacity="0" />
                        </Grid>
                    </Border>
                    <ContentPresenter
                        x:Name="contentPresenter"
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Focusable="False"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasContent" Value="true">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
                        <Setter Property="Padding" Value="4,-1,0,0" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter TargetName="checkBoxBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}" />
                        <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                        <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" />
                        <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
                        <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                        <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}" />
                        <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}" />
                        <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                        <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                        <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="{x:Null}">
                        <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                        <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ResourceDictionary>
    </Application.Resources>
</Application>
